/**
 */
package de.dfki.cos.basys.aas.provider;

import de.dfki.cos.basys.aas.util.AasAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AasItemProviderAdapterFactory extends AasAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AasItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IIdentifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentifierItemProvider identifierItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IIdentifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentifierAdapter() {
		if (identifierItemProvider == null) {
			identifierItemProvider = new IdentifierItemProvider(this);
		}

		return identifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IAdministrativeInformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdministrativeInformationItemProvider administrativeInformationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IAdministrativeInformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdministrativeInformationAdapter() {
		if (administrativeInformationItemProvider == null) {
			administrativeInformationItemProvider = new AdministrativeInformationItemProvider(this);
		}

		return administrativeInformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IQualifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualifierItemProvider qualifierItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IQualifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualifierAdapter() {
		if (qualifierItemProvider == null) {
			qualifierItemProvider = new QualifierItemProvider(this);
		}

		return qualifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IFormula} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormulaItemProvider formulaItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IFormula}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormulaAdapter() {
		if (formulaItemProvider == null) {
			formulaItemProvider = new FormulaItemProvider(this);
		}

		return formulaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IAssetAdministrationShell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetAdministrationShellItemProvider assetAdministrationShellItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IAssetAdministrationShell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetAdministrationShellAdapter() {
		if (assetAdministrationShellItemProvider == null) {
			assetAdministrationShellItemProvider = new AssetAdministrationShellItemProvider(this);
		}

		return assetAdministrationShellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IAsset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetItemProvider assetItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IAsset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetAdapter() {
		if (assetItemProvider == null) {
			assetItemProvider = new AssetItemProvider(this);
		}

		return assetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.ISubmodel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubmodelItemProvider submodelItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.ISubmodel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubmodelAdapter() {
		if (submodelItemProvider == null) {
			submodelItemProvider = new SubmodelItemProvider(this);
		}

		return submodelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IMultiLanguageProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiLanguagePropertyItemProvider multiLanguagePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IMultiLanguageProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiLanguagePropertyAdapter() {
		if (multiLanguagePropertyItemProvider == null) {
			multiLanguagePropertyItemProvider = new MultiLanguagePropertyItemProvider(this);
		}

		return multiLanguagePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IReferenceElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceElementItemProvider referenceElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IReferenceElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceElementAdapter() {
		if (referenceElementItemProvider == null) {
			referenceElementItemProvider = new ReferenceElementItemProvider(this);
		}

		return referenceElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeItemProvider rangeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeAdapter() {
		if (rangeItemProvider == null) {
			rangeItemProvider = new RangeItemProvider(this);
		}

		return rangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IBlob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlobItemProvider blobItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IBlob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlobAdapter() {
		if (blobItemProvider == null) {
			blobItemProvider = new BlobItemProvider(this);
		}

		return blobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.ISubmodelElementCollection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubmodelElementCollectionItemProvider submodelElementCollectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.ISubmodelElementCollection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubmodelElementCollectionAdapter() {
		if (submodelElementCollectionItemProvider == null) {
			submodelElementCollectionItemProvider = new SubmodelElementCollectionItemProvider(this);
		}

		return submodelElementCollectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IRelationshipElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipElementItemProvider relationshipElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IRelationshipElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipElementAdapter() {
		if (relationshipElementItemProvider == null) {
			relationshipElementItemProvider = new RelationshipElementItemProvider(this);
		}

		return relationshipElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IAnnotatedRelationshipElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotatedRelationshipElementItemProvider annotatedRelationshipElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IAnnotatedRelationshipElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotatedRelationshipElementAdapter() {
		if (annotatedRelationshipElementItemProvider == null) {
			annotatedRelationshipElementItemProvider = new AnnotatedRelationshipElementItemProvider(this);
		}

		return annotatedRelationshipElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IOperationVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationVariableItemProvider operationVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IOperationVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationVariableAdapter() {
		if (operationVariableItemProvider == null) {
			operationVariableItemProvider = new OperationVariableItemProvider(this);
		}

		return operationVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.ICapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CapabilityItemProvider capabilityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.ICapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapabilityAdapter() {
		if (capabilityItemProvider == null) {
			capabilityItemProvider = new CapabilityItemProvider(this);
		}

		return capabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IBasicEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicEventItemProvider basicEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IBasicEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicEventAdapter() {
		if (basicEventItemProvider == null) {
			basicEventItemProvider = new BasicEventItemProvider(this);
		}

		return basicEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewItemProvider viewItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewAdapter() {
		if (viewItemProvider == null) {
			viewItemProvider = new ViewItemProvider(this);
		}

		return viewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IConceptDictionary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptDictionaryItemProvider conceptDictionaryItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IConceptDictionary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptDictionaryAdapter() {
		if (conceptDictionaryItemProvider == null) {
			conceptDictionaryItemProvider = new ConceptDictionaryItemProvider(this);
		}

		return conceptDictionaryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IConceptDescription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptDescriptionItemProvider conceptDescriptionItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IConceptDescription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptDescriptionAdapter() {
		if (conceptDescriptionItemProvider == null) {
			conceptDescriptionItemProvider = new ConceptDescriptionItemProvider(this);
		}

		return conceptDescriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyItemProvider keyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyAdapter() {
		if (keyItemProvider == null) {
			keyItemProvider = new KeyItemProvider(this);
		}

		return keyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.ISecurity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityItemProvider securityItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.ISecurity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityAdapter() {
		if (securityItemProvider == null) {
			securityItemProvider = new SecurityItemProvider(this);
		}

		return securityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.cos.basys.aas.IAssetAdministrationShellBundle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetAdministrationShellBundleItemProvider assetAdministrationShellBundleItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.cos.basys.aas.IAssetAdministrationShellBundle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetAdministrationShellBundleAdapter() {
		if (assetAdministrationShellBundleItemProvider == null) {
			assetAdministrationShellBundleItemProvider = new AssetAdministrationShellBundleItemProvider(this);
		}

		return assetAdministrationShellBundleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (identifierItemProvider != null) identifierItemProvider.dispose();
		if (administrativeInformationItemProvider != null) administrativeInformationItemProvider.dispose();
		if (qualifierItemProvider != null) qualifierItemProvider.dispose();
		if (formulaItemProvider != null) formulaItemProvider.dispose();
		if (assetAdministrationShellItemProvider != null) assetAdministrationShellItemProvider.dispose();
		if (assetItemProvider != null) assetItemProvider.dispose();
		if (submodelItemProvider != null) submodelItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (multiLanguagePropertyItemProvider != null) multiLanguagePropertyItemProvider.dispose();
		if (referenceElementItemProvider != null) referenceElementItemProvider.dispose();
		if (rangeItemProvider != null) rangeItemProvider.dispose();
		if (blobItemProvider != null) blobItemProvider.dispose();
		if (fileItemProvider != null) fileItemProvider.dispose();
		if (submodelElementCollectionItemProvider != null) submodelElementCollectionItemProvider.dispose();
		if (relationshipElementItemProvider != null) relationshipElementItemProvider.dispose();
		if (annotatedRelationshipElementItemProvider != null) annotatedRelationshipElementItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (operationVariableItemProvider != null) operationVariableItemProvider.dispose();
		if (capabilityItemProvider != null) capabilityItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (basicEventItemProvider != null) basicEventItemProvider.dispose();
		if (viewItemProvider != null) viewItemProvider.dispose();
		if (conceptDictionaryItemProvider != null) conceptDictionaryItemProvider.dispose();
		if (conceptDescriptionItemProvider != null) conceptDescriptionItemProvider.dispose();
		if (referenceItemProvider != null) referenceItemProvider.dispose();
		if (keyItemProvider != null) keyItemProvider.dispose();
		if (securityItemProvider != null) securityItemProvider.dispose();
		if (assetAdministrationShellBundleItemProvider != null) assetAdministrationShellBundleItemProvider.dispose();
	}

}
